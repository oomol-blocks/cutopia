{
  "version": 3,
  "sources": ["../main.ts", "../converter.ts", "../constants.ts"],
  "sourcesContent": ["import type { Context } from \"@oomol/types/oocana\";\nimport * as fs from \"node:fs/promises\"\n\nimport { ConversionOptions } from \"./constants\"\nimport { VideoConverter, ConversionError} from \"./converter\"\n\nexport type Outputs = {\n    media: string\n}\n\nexport type Inputs = {\n    mediaPath: string | null;\n    isCompress: boolean;\n    mediaInfo: { \n        format_name: string; \n        audioChannels: string; \n        codeRate: string; \n        codecs: string; \n        colorProfile: string; \n        duration: string; \n        name: string; \n        kind: string; \n        size: string | number;  // \u652F\u6301\u5B57\u7B26\u4E32\u6216\u6570\u5B57\n        quality: string; \n        dimensions: string;\n        // \u65B0\u589E\u7F16\u7801\u4FE1\u606F\n        videoCodec?: string;\n        audioCodec?: string;\n        containerFormat?: string;\n    };\n    [key: string]: any;\n}\n\nexport default async function (\n    params: Inputs,\n    context: Context<Inputs, Outputs>\n): Promise<Partial<Outputs> | undefined | void> {\n    try {\n\n        if (!params.mediaInfo.size) {\n            try {\n                const stats = await fs.stat(params.mediaPath!);\n                params.mediaInfo.size = stats.size;\n            } catch (error) {\n                console.warn(\"\u65E0\u6CD5\u83B7\u53D6\u6587\u4EF6\u5927\u5C0F\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u503C 0\");\n                params.mediaInfo.size = 0;\n            }\n        }\n\n        const options: ConversionOptions = {\n            customQuality: params.customQuality,\n            customBitrate: params.customBitrate,\n            preserveMetadata: params.preserveMetadata || false,\n            hardwareAcceleration: params.hardwareAcceleration || 'auto',\n            preset: params.preset || \"fast\"\n        };\n\n        const converter = new VideoConverter(context, options);\n        return await converter.convert(params);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n\n        context.preview({\n            type: \"table\",\n            data: {\n                columns: [\"Error\", \"Details\"],\n                rows: [\n                    [\"\u274C Conversion Failed\", errorMessage],\n                    [\"File\", params.mediaPath || 'Unknown'],\n                    [\"Target Format\", params.targetFormat?.value || 'Unknown']\n                ]\n            }\n        });\n\n        throw new ConversionError(`Video conversion failed: ${errorMessage}`, error instanceof Error ? error : undefined);\n    }\n};\n", "import type { Context } from \"@oomol/types/oocana\";\nimport { spawn } from \"child_process\";\nimport { path as ffmpegPath } from \"@ffmpeg-installer/ffmpeg\";\nimport path from \"path\"\nimport * as fs from 'node:fs/promises';\n\nimport { FORMAT_CONFIGS, ConversionOptions, VIDEO_FORMATS, BYTES_PER_GB, BYTES_PER_MB, FFMPEG_PARAMS, CODEC_COMPATIBILITY } from \"./constants\"\nimport { VideoFormatOption } from \"./inputRender\"\nimport { Outputs, Inputs } from \"./main\"\n\ntype MediaInfo = Inputs[\"mediaInfo\"];\n\nexport class VideoConverter {\n    private readonly context: Context<Inputs, Outputs>;\n    private readonly options: ConversionOptions;\n    private totalDuration: number = 0;\n\n    constructor(context: Context<Inputs, Outputs>, options: ConversionOptions = {}) {\n        this.context = context;\n        this.options = {\n            preserveMetadata: true,\n            hardwareAcceleration: 'auto',\n            preset: 'fast',\n            copyStreams: true,\n            threads: Math.min(options.maxThreads || FFMPEG_PARAMS.THREAD_OPTIMIZATION.maxThreads, 4),\n            ...options\n        };\n    }\n\n    private static validateInputs(params: Inputs): void {\n        const { mediaPath, mediaInfo, targetFormat } = params;\n\n        if (!mediaPath) {\n            throw new Error(\"Media path is required\");\n        }\n\n        if (!mediaInfo || !mediaInfo.dimensions) {\n            throw new Error(\"Media info with dimensions is required\");\n        }\n\n        if (!targetFormat || !targetFormat.value) {\n            throw new Error(\"Target format is required\");\n        }\n\n        const supportedFormat = VIDEO_FORMATS.includes(targetFormat.value as any);\n        if (!supportedFormat) {\n            throw new Error(`Unsupported target format: ${targetFormat.value}`);\n        }\n    }\n\n    private static parseDimensions(dimensions: string): { width: number; height: number } {\n        const [width, height] = dimensions.split('x').map(Number);\n        if (isNaN(width) || isNaN(height)) {\n            throw new Error(`Invalid dimensions format: ${dimensions}`);\n        }\n        return { width, height };\n    }\n\n    private static formatFileSize(bytes: number): string {\n        if (bytes >= BYTES_PER_GB) {\n            return `${(bytes / BYTES_PER_GB).toFixed(2)} GB`;\n        }\n        return `${(bytes / BYTES_PER_MB).toFixed(2)} MB`;\n    }\n\n    private static async getFileSize(filePath: string): Promise<number> {\n        try {\n            const stats = await fs.stat(filePath);\n            return stats.size;\n        } catch {\n            return 0;\n        }\n    }\n\n    private static getFileSizeFromMediaInfo(mediaInfo: MediaInfo): number {\n        if (typeof mediaInfo.size === 'number') {\n            return mediaInfo.size;\n        }\n        if (typeof mediaInfo.size === 'string') {\n            // \u89E3\u6790\u6587\u4EF6\u5927\u5C0F\u5B57\u7B26\u4E32\uFF0C\u5982 \"1.5 GB\", \"500 MB\"\n            const sizeMatch = mediaInfo.size.match(/^([\\d.]+)\\s*(GB|MB|KB|B)$/i);\n            if (sizeMatch) {\n                const value = parseFloat(sizeMatch[1]);\n                const unit = sizeMatch[2].toUpperCase();\n                switch (unit) {\n                    case 'GB': return Math.floor(value * BYTES_PER_GB);\n                    case 'MB': return Math.floor(value * BYTES_PER_MB);\n                    case 'KB': return Math.floor(value * 1000);\n                    case 'B': return Math.floor(value);\n                    default: return 0;\n                }\n            }\n        }\n        return 0;\n    }\n\n    private static generateOutputPath(inputPath: string, targetFormat: string): string {\n        return `${inputPath.replace(path.extname(inputPath), '')}-${Date.now()}${targetFormat}`;\n    }\n\n    private getQualityPreset(quality: string, isCompress: boolean): { crf: number; nvenc_cq: number; qsv_q: number } {\n        if (!isCompress) {\n            return FFMPEG_PARAMS.QUALITY_PRESETS.lossless;\n        }\n\n        if (quality.includes('4K') || quality.includes('UHD')) {\n            return FFMPEG_PARAMS.QUALITY_PRESETS.medium;\n        }\n\n        if (quality.includes('2K') || quality.includes('QHD')) {\n            return FFMPEG_PARAMS.QUALITY_PRESETS.medium;\n        }\n\n        if (quality.includes('1080p') || quality.includes('FHD')) {\n            return FFMPEG_PARAMS.QUALITY_PRESETS.fast;\n        }\n\n        if (quality.includes('720p') || quality.includes('HD')) {\n            return FFMPEG_PARAMS.QUALITY_PRESETS.fast;\n        }\n\n        return FFMPEG_PARAMS.QUALITY_PRESETS.medium;\n    }\n\n    private canCopyAllStreams(mediaInfo: MediaInfo, targetFormat: string): boolean {\n        if (!this.options.copyStreams) return false;\n\n        const { videoCompatible, audioCompatible } = this.checkStreamCompatibility(mediaInfo, targetFormat);\n\n        console.log(`\uD83D\uDD0D \u5B8C\u5168\u6D41\u590D\u5236\u68C0\u67E5:`);\n        console.log(`   \u89C6\u9891\u517C\u5BB9: ${videoCompatible ? '\u2705' : '\u274C'}`);\n        console.log(`   \u97F3\u9891\u517C\u5BB9: ${audioCompatible ? '\u2705' : '\u274C'}`);\n        console.log(`   \u53EF\u5B8C\u5168\u590D\u5236: ${videoCompatible && audioCompatible ? '\u2705' : '\u274C'}`);\n\n        return videoCompatible && audioCompatible;\n    }\n\n    private checkStreamCompatibility(mediaInfo: MediaInfo, targetFormat: string): {\n        videoCompatible: boolean;\n        audioCompatible: boolean;\n        videoCodec: string | null;\n        audioCodec: string | null;\n    } {\n        const targetFormatKey = targetFormat.substring(1);\n        const targetConfig = FORMAT_CONFIGS[targetFormatKey.toLowerCase() as keyof typeof FORMAT_CONFIGS];\n\n        if (!targetConfig) {\n            return {\n                videoCompatible: false,\n                audioCompatible: false,\n                videoCodec: null,\n                audioCodec: null\n            };\n        }\n\n        // \u63D0\u53D6\u7F16\u7801\u683C\u5F0F\n        const videoCodec = this.extractVideoCodec(mediaInfo);\n        const audioCodec = this.extractAudioCodec(mediaInfo);\n\n        // \u5982\u679C\u65E0\u6CD5\u786E\u5B9A\u7F16\u7801\u683C\u5F0F\uFF0C\u4E0D\u4F7F\u7528\u6D41\u590D\u5236\n        if (!videoCodec || !audioCodec) {\n            return {\n                videoCompatible: false,\n                audioCompatible: false,\n                videoCodec,\n                audioCodec\n            };\n        }\n\n        // \u68C0\u67E5\u7F16\u7801\u517C\u5BB9\u6027\n        const videoCompatible = this.isCodecCompatible(videoCodec, targetFormatKey, 'video');\n        const audioCompatible = this.isCodecCompatible(audioCodec, targetFormatKey, 'audio');\n\n        return {\n            videoCompatible,\n            audioCompatible,\n            videoCodec,\n            audioCodec\n        };\n    }\n\n    private addVideoCodecArgs(\n        args: string[],\n        formatConfig: any,\n        videoCompatible: boolean,\n        isCompress: boolean,\n        mediaInfo: MediaInfo\n    ): void {\n        if (videoCompatible && !isCompress) {\n            console.log(\"\uD83C\uDFA5 \u89C6\u9891\u6D41\u590D\u5236\u6A21\u5F0F\");\n            args.push('-c:v', 'copy');\n        } else {\n            console.log(\"\uD83C\uDFA5 \u89C6\u9891\u91CD\u65B0\u7F16\u7801\");\n            const videoCodecName = formatConfig.video;\n            args.push('-c:v', videoCodecName);\n\n            // \u6DFB\u52A0\u89C6\u9891\u8D28\u91CF\u53C2\u6570\n            this.addVideoQualityArgs(args, videoCodecName, isCompress, mediaInfo);\n        }\n    }\n\n    private addAudioCodecArgs(\n        args: string[],\n        formatConfig: any,\n        audioCompatible: boolean,\n        isCompress: boolean\n    ): void {\n        if (audioCompatible && !isCompress) {\n            console.log(\"\uD83C\uDFB5 \u97F3\u9891\u6D41\u590D\u5236\u6A21\u5F0F\");\n            args.push('-c:a', 'copy');\n        } else {\n            console.log(\"\uD83C\uDFB5 \u97F3\u9891\u91CD\u65B0\u7F16\u7801\");\n            args.push('-c:a', formatConfig.audio);\n\n            // \u6DFB\u52A0\u97F3\u9891\u6BD4\u7279\u7387\n            const audioBitrate = this.options.customBitrate || FFMPEG_PARAMS.AUDIO_BITRATES.medium;\n            args.push('-b:a', audioBitrate);\n        }\n    }\n\n    private addVideoQualityArgs(\n        args: string[],\n        videoCodecName: string,\n        isCompress: boolean,\n        mediaInfo: MediaInfo\n    ): void {\n        const qualityPreset = this.getQualityPreset(mediaInfo.quality, isCompress);\n\n        if (isCompress) {\n            // \u5206\u8FA8\u7387\u7F29\u653E\n            const { width, height } = VideoConverter.parseDimensions(mediaInfo.dimensions);\n            if (width > 1920 || height > 1080) {\n                args.push('-vf',\n                    'scale=1920:1080:force_original_aspect_ratio=decrease:force_divisible_by=2'\n                );\n            }\n        }\n\n        // \u8D28\u91CF\u8BBE\u7F6E\n        const customQuality = this.options.customQuality;\n        let qualityValue: number;\n\n        if (videoCodecName.includes('nvenc')) {\n            qualityValue = customQuality || qualityPreset.nvenc_cq;\n            args.push('-cq', qualityValue.toString());\n            args.push('-preset', 'fast');\n        } else if (videoCodecName.includes('qsv')) {\n            qualityValue = customQuality || qualityPreset.qsv_q;\n            args.push('-q', qualityValue.toString());\n            args.push('-preset', 'fast');\n        } else {\n            qualityValue = customQuality || qualityPreset.crf;\n            args.push('-crf', qualityValue.toString());\n            args.push('-preset', this.options.preset!);\n        }\n    }\n\n    private extractVideoCodec(mediaInfo: MediaInfo): string | null {\n        // \u4F18\u5148\u4ECE videoCodec \u5B57\u6BB5\u83B7\u53D6\n        if (mediaInfo.videoCodec) {\n            return mediaInfo.videoCodec.toLowerCase();\n        }\n\n        // \u4ECE codecs \u5B57\u6BB5\u89E3\u6790\n        if (mediaInfo.codecs) {\n            const codecs = mediaInfo.codecs.toLowerCase();\n            if (codecs.includes('h264') || codecs.includes('avc')) return 'h264';\n            if (codecs.includes('h265') || codecs.includes('hevc')) return 'h265';\n            if (codecs.includes('vp9')) return 'vp9';\n            if (codecs.includes('vp8')) return 'vp8';\n            if (codecs.includes('wmv')) return 'wmv2';\n        }\n\n        // \u4ECE\u5BB9\u5668\u683C\u5F0F\u63A8\u65AD\n        const containerFormat = mediaInfo.containerFormat || mediaInfo.kind;\n        if (containerFormat) {\n            const format = containerFormat.toLowerCase();\n            if (format === 'webm') return 'vp9'; // webm \u901A\u5E38\u4F7F\u7528 vp9\n            if (format === 'wmv') return 'wmv2';\n        }\n\n        return null;\n    }\n\n    private extractAudioCodec(mediaInfo: MediaInfo): string | null {\n        // \u4F18\u5148\u4ECE audioCodec \u5B57\u6BB5\u83B7\u53D6\n        if (mediaInfo.audioCodec) {\n            return mediaInfo.audioCodec.toLowerCase();\n        }\n\n        // \u4ECE codecs \u5B57\u6BB5\u89E3\u6790\n        if (mediaInfo.codecs) {\n            const codecs = mediaInfo.codecs.toLowerCase();\n            if (codecs.includes('aac')) return 'aac';\n            if (codecs.includes('mp3')) return 'mp3';\n            if (codecs.includes('opus')) return 'opus';\n            if (codecs.includes('vorbis')) return 'vorbis';\n            if (codecs.includes('wmav2')) return 'wmav2';\n        }\n\n        // \u4ECE\u5BB9\u5668\u683C\u5F0F\u63A8\u65AD\n        const containerFormat = mediaInfo.containerFormat || mediaInfo.kind;\n        if (containerFormat) {\n            const format = containerFormat.toLowerCase();\n            if (format === 'webm') return 'opus'; // webm \u901A\u5E38\u4F7F\u7528 opus\n            if (format === 'wmv') return 'wmav2';\n        }\n\n        return null;\n    }\n\n    private isCodecCompatible(codec: string, targetFormat: string, type: 'video' | 'audio'): boolean {\n        const compatibility = CODEC_COMPATIBILITY[type];\n        const codecFormats = compatibility[codec as keyof typeof compatibility] as string;\n        return codecFormats ? codecFormats.includes(targetFormat) : false;\n    }\n\n    private buildFFmpegArgs(params: Inputs, outputPath: string): string[] {\n        const { mediaPath, mediaInfo, targetFormat, isCompress } = params;\n        const args: string[] = [];\n\n        // TODO\uFF1A\u786C\u4EF6\u52A0\u901F\n        // \u8F93\u5165\u8BBE\u7F6E\n        args.push(\n            '-fflags', FFMPEG_PARAMS.INPUT_OPTIMIZATION.fflags,\n            '-probesize', FFMPEG_PARAMS.INPUT_OPTIMIZATION.probesize,\n            '-analyzeduration', FFMPEG_PARAMS.INPUT_OPTIMIZATION.analyzeduration\n        );\n\n        args.push('-i', mediaPath!);\n\n        const targetFormatKey = targetFormat!.value.substring(1);\n        const formatConfig = FORMAT_CONFIGS[targetFormatKey.toLowerCase() as keyof typeof FORMAT_CONFIGS];\n\n        if (!formatConfig) {\n            throw new Error(`Unsupported format: ${targetFormat.value}`);\n        }\n\n        // \u68C0\u67E5\u6D41\u517C\u5BB9\u6027\uFF0C\u5224\u65AD\u662F\u5426\u53EF\u4EE5\u76F4\u63A5\u590D\u5236\u6D41\n        const streamCompatibility = this.checkStreamCompatibility(mediaInfo, targetFormat!.value);\n        const { videoCompatible, audioCompatible, videoCodec, audioCodec } = streamCompatibility;\n\n        if (this.canCopyAllStreams(mediaInfo, targetFormat!.value) && !isCompress) {\n            console.log(\"\uD83D\uDE80 \u4F7F\u7528\u5B8C\u5168\u6D41\u590D\u5236\u6A21\u5F0F\");\n            args.push('-c', 'copy');\n        } else {\n            // \u5206\u522B\u5904\u7406\u89C6\u9891\u548C\u97F3\u9891\u7F16\u7801\n            this.addVideoCodecArgs(args, formatConfig, videoCompatible, isCompress, mediaInfo);\n            this.addAudioCodecArgs(args, formatConfig, audioCompatible, isCompress);\n        }\n\n        // \u7EBF\u7A0B\u8BBE\u7F6E\n        const maxThreads = this.options.threads || FFMPEG_PARAMS.THREAD_OPTIMIZATION.defaultThreads;\n        args.push('-threads', maxThreads.toString());\n\n        // \u5143\u6570\u636E\u5904\u7406\n        if (this.options.preserveMetadata) {\n            args.push('-map_metadata', '0');\n        }\n\n        // \u8F93\u51FA\u8BBE\u7F6E\n        args.push(\n            '-movflags', '+faststart',\n            '-pix_fmt', formatConfig.pixelFormat || 'yuv420p',\n            '-y', outputPath\n        );\n        console.log(\"\uD83D\uDD27 FFmpeg\u53C2\u6570:\", args.join(' '));\n        return args;\n    }\n\n    private parseDurationFromFFmpegOutput(data: string): void {\n        if (this.totalDuration <= 0) {\n            const durationMatch = data.match(/Duration:\\s*(\\d+):(\\d+):(\\d+\\.\\d+)/);\n            if (durationMatch) {\n                const hours = parseInt(durationMatch[1], 10);\n                const minutes = parseInt(durationMatch[2], 10);\n                const seconds = parseFloat(durationMatch[3]);\n\n                this.totalDuration = hours * 3600 + minutes * 60 + seconds;\n                console.log(`\uD83D\uDCCF \u89C6\u9891\u65F6\u957F: ${this.totalDuration.toFixed(2)}\u79D2`);\n            }\n        }\n    }\n\n    /**\n     * Execute FFmpeg conversion\n     */\n    private executeFFmpeg(args: string[]): Promise<{ stdout: string; stderr: string }> {\n        return new Promise((resolve, reject) => {\n            const ffmpeg = spawn(ffmpegPath, args);\n\n            let stdout = '';\n            let stderr = '';\n\n            ffmpeg.stdout.on('data', (data) => {\n                stdout += data.toString();\n            });\n\n            ffmpeg.stderr.on('data', (data) => {\n                const dataStr = data.toString();\n                stderr += dataStr;\n                this.parseDurationFromFFmpegOutput(dataStr);\n                this.parseProgress(dataStr);\n            });\n\n            ffmpeg.on('close', (code) => {\n                if (code === 0) {\n                    resolve({ stdout, stderr });\n                } else {\n                    reject(new Error(`FFmpeg failed with exit code ${code}\\nError: ${stderr}`));\n                }\n            });\n\n            ffmpeg.on('error', (error) => {\n                reject(new Error(`FFmpeg process error: ${error.message}`));\n            });\n        });\n    }\n\n    /**\n     * Parse progress information\n     */\n    private parseProgress(data: string): void {\n        const timeMatch = data.match(/time=(\\d+):(\\d+):(\\d+\\.\\d+)/);\n        if (timeMatch && this.totalDuration > 0) {\n            const hours = parseInt(timeMatch[1], 10);\n            const minutes = parseInt(timeMatch[2], 10);\n            const seconds = parseFloat(timeMatch[3]);\n\n            const currentTimeInSeconds = hours * 3600 + minutes * 60 + seconds;\n            const progress = Math.min((currentTimeInSeconds / this.totalDuration) * 100, 100);\n\n            this.context.reportProgress(progress);\n        }\n    }\n\n    /**\n     * Create preview of the current task\n     */\n    private createPreview(\n        mediaInfo: MediaInfo,\n        targetFormat: VideoFormatOption,\n        originalSize: number,\n        outputSize: number,\n        compressionRatio: number,\n        conversionTime: number,\n        isCompress: boolean\n    ): void {\n        const compressionInfo = isCompress && compressionRatio > 0\n            ? ` (compressed ${compressionRatio.toFixed(1)}%)`\n            : '';\n\n        const previewRows = [\n            [\"Status\", \"\u2705 Conversion Successful\"],\n            [\"Original File\", `${mediaInfo.name} (${mediaInfo.kind.toUpperCase()})`],\n            [\"Target Format\", targetFormat.value.toLowerCase()],\n            [\"Original Size\", VideoConverter.formatFileSize(originalSize)],\n            [\"Output Size\", VideoConverter.formatFileSize(outputSize) + compressionInfo],\n            [\"Conversion Time\", `${(conversionTime / 1000).toFixed(1)}s`],\n            ...(compressionRatio > 0 ? [[\"Compression Ratio\", `${compressionRatio.toFixed(1)}%`]] : []),\n            [\"Quality\", mediaInfo.quality],\n            [\"Dimensions\", mediaInfo.dimensions]\n        ];\n\n        this.context.preview({\n            type: \"table\",\n            data: {\n                columns: [\"Property\", \"Value\"],\n                rows: previewRows\n            }\n        });\n    }\n\n    /**\n     * Execute video conversion\n     */\n    async convert(params) {\n        console.log(\"\uD83C\uDFAC \u5F00\u59CB\u89C6\u9891\u8F6C\u6362\u6D41\u7A0B...\");\n\n        VideoConverter.validateInputs(params);\n        console.log(\"\u2705 \u53C2\u6570\u9A8C\u8BC1\u901A\u8FC7\");\n\n        const { mediaPath, mediaInfo, targetFormat, isCompress } = params;\n\n        // \u83B7\u53D6\u6587\u4EF6\u5927\u5C0F\uFF08\u4F18\u5148\u4ECE mediaInfo\uFF0C\u7136\u540E\u4ECE\u6587\u4EF6\u7CFB\u7EDF\uFF09\n        let originalSize = VideoConverter.getFileSizeFromMediaInfo(mediaInfo);\n        if (originalSize === 0) {\n            originalSize = await VideoConverter.getFileSize(mediaPath!);\n            // \u66F4\u65B0 mediaInfo \u4E2D\u7684 size\n            mediaInfo.size = originalSize;\n        }\n\n        console.log(\"\uD83D\uDCC2 \u8F93\u5165\u6587\u4EF6\u4FE1\u606F:\");\n        console.log(`   \u6587\u4EF6\u8DEF\u5F84: ${mediaPath}`);\n        console.log(`   \u6587\u4EF6\u5927\u5C0F: ${VideoConverter.formatFileSize(originalSize)}`);\n        console.log(`   \u76EE\u6807\u683C\u5F0F: ${targetFormat!.value.toUpperCase()}`);\n        console.log(`   \u538B\u7F29\u6A21\u5F0F: ${isCompress ? '\u662F' : '\u5426'}`);\n\n        const outputPath = VideoConverter.generateOutputPath(mediaPath, targetFormat.value);\n        console.log(`\u2705 \u8F93\u51FA\u8DEF\u5F84: ${outputPath}`);\n\n        const ffmpegArgs = this.buildFFmpegArgs(params, outputPath);\n\n        // \u5F00\u59CB\u8F6C\u6362\n        console.log(\"\uD83D\uDE80 \u5F00\u59CB\u6267\u884C\u89C6\u9891\u8F6C\u6362...\");\n        const startTime = Date.now();\n\n        try {\n            await this.executeFFmpeg(ffmpegArgs);\n            console.log(\"\u2705 \u89C6\u9891\u8F6C\u6362\u6210\u529F\u5B8C\u6210!\");\n        } catch (error) {\n            console.error(\"\u274C \u89C6\u9891\u8F6C\u6362\u5931\u8D25:\", error.message);\n            throw error;\n        }\n\n        // \u8BA1\u7B97\u8F6C\u6362\u65F6\u95F4\n        const conversionTime = Date.now() - startTime;\n        console.log(`\u23F1\uFE0F \u8F6C\u6362\u8017\u65F6: ${(conversionTime / 1000).toFixed(1)}\u79D2`);\n\n        // \u83B7\u53D6\u8F93\u51FA\u6587\u4EF6\u5927\u5C0F\n        const outputSize = await VideoConverter.getFileSize(outputPath);\n        const compressionRatio = originalSize > 0 ? ((originalSize - outputSize) / originalSize * 100) : 0;\n\n        console.log(`\u2705 \u8F93\u51FA\u6587\u4EF6\u5927\u5C0F: ${VideoConverter.formatFileSize(outputSize)}`);\n        if (compressionRatio > 0) {\n            console.log(`\uD83D\uDCC9 \u538B\u7F29\u6BD4\u4F8B: ${compressionRatio.toFixed(1)}%`);\n        }\n\n        // \u521B\u5EFA\u9884\u89C8\n        this.createPreview(\n            mediaInfo,\n            targetFormat,\n            originalSize,\n            outputSize,\n            compressionRatio,\n            conversionTime,\n            isCompress\n        );\n\n        console.log(\"\uD83C\uDF89 \u89C6\u9891\u8F6C\u6362\u6D41\u7A0B\u5168\u90E8\u5B8C\u6210!\");\n        return {\n            media: outputPath\n        };\n    }\n}\n\nexport class ConversionError extends Error {\n    constructor(message: string, public readonly cause?: Error) {\n        super(message);\n        this.name = 'ConversionError';\n    }\n}\n", "export const VIDEO_FORMATS = [\n    '.mp4', '.avi', '.mkv', '.mov', '.wmv', \n    '.flv', '.webm',\n] as const;\n\nexport const FORMAT_CONFIGS = {\n    mp4: { \n        video: 'libx264', \n        videoHW: 'h264_nvenc', \n        videoQSV: 'h264_qsv',  \n        audio: 'aac', \n        container: 'mp4',\n        pixelFormat: 'yuv420p'\n    },\n    avi: { \n        video: 'libx264', \n        videoHW: 'h264_nvenc',\n        videoQSV: 'h264_qsv',\n        audio: 'mp3', \n        container: 'avi',\n        pixelFormat: 'yuv420p'\n    },\n    mkv: { \n        video: 'libx264', \n        videoHW: 'h264_nvenc',\n        videoQSV: 'h264_qsv',\n        audio: 'aac', \n        container: 'matroska',\n        pixelFormat: 'yuv420p'\n    },\n    mov: { \n        video: 'libx264', \n        videoHW: 'h264_nvenc',\n        videoQSV: 'h264_qsv',\n        audio: 'aac', \n        container: 'mov',\n        pixelFormat: 'yuv420p'\n    },\n    wmv: { \n        video: 'wmv2', \n        audio: 'wmav2', \n        container: 'asf',\n        pixelFormat: 'yuv420p'\n    },\n    webm: { \n        video: 'libvpx-vp9', \n        audio: 'libopus', \n        container: 'webm',\n        pixelFormat: 'yuv420p'\n    },\n    flv: { \n        video: 'libx264', \n        videoHW: 'h264_nvenc',\n        videoQSV: 'h264_qsv',\n        audio: 'aac', \n        container: 'flv',\n        pixelFormat: 'yuv420p'\n    }\n} as const;\n\nexport const FFMPEG_PARAMS = {\n    INPUT_OPTIMIZATION: {\n        fflags: '+fastseek+genpts',\n        probesize: '16M',      // \u4ECE32M\u964D\u4F4E\u523016M\n        analyzeduration: '5M'  // \u4ECE10M\u964D\u4F4E\u52305M\n    },\n    THREAD_OPTIMIZATION: {\n        maxThreads: 4,         // \u9650\u5236\u6700\u5927\u7EBF\u7A0B\u6570\n        defaultThreads: 2      // \u9ED8\u8BA4\u7EBF\u7A0B\u6570\n    },\n    QUALITY_PRESETS: {\n        fast: { crf: 28, nvenc_cq: 28, qsv_q: 28 },\n        medium: { crf: 24, nvenc_cq: 24, qsv_q: 24 },\n        high: { crf: 20, nvenc_cq: 20, qsv_q: 20 },\n        lossless: { crf: 18, nvenc_cq: 18, qsv_q: 18 }\n    },\n    AUDIO_BITRATES: {\n        low: '96k',\n        medium: '128k',\n        high: '192k',\n        lossless: '320k'\n    },\n    PRESETS: {\n        software: ['ultrafast', 'superfast', 'veryfast', 'faster', 'fast', 'medium', 'slow', 'slower', 'veryslow'],\n        nvenc: ['fast', 'medium', 'slow'],\n        qsv: ['veryfast', 'faster', 'fast', 'medium', 'slow']\n    }\n} as const;\n\nexport const CODEC_COMPATIBILITY = {\n    // \u89C6\u9891\u7F16\u7801\u517C\u5BB9\u6027\n    video: {\n        h264: ['mp4', 'avi', 'mkv', 'mov', 'flv'],\n        h265: ['mp4', 'mkv', 'mov'],\n        vp8: ['webm'],\n        vp9: ['webm', 'mkv'],\n        wmv2: ['wmv'],\n        xvid: ['avi']\n    },\n    // \u97F3\u9891\u7F16\u7801\u517C\u5BB9\u6027\n    audio: {\n        aac: ['mp4', 'mkv', 'mov', 'flv'],\n        mp3: ['avi', 'mkv'],\n        opus: ['webm', 'mkv'],\n        vorbis: ['webm', 'mkv'],\n        wmav2: ['wmv']\n    }\n} as const;\n\nexport const BYTES_PER_GB = 1_000_000_000;\nexport const BYTES_PER_MB = 1_000_000;\nexport const KBPS_PER_MBPS = 1000;\n\nexport const QUALITY_THRESHOLDS = {\n    UHD: { width: 3840, height: 2160, bitrate: 15, highBitrate: 10 },\n    QHD: { width: 2560, height: 1440, bitrate: 8 },\n    FHD: { width: 1920, height: 1080, bitrate: 5, mediumBitrate: 2 },\n    HD: { width: 1280, height: 720, bitrate: 2 }\n} as const;\n\nexport interface ConversionOptions {\n    customQuality?: number;\n    customBitrate?: string;\n    preserveMetadata?: boolean;\n    hardwareAcceleration?: boolean | 'nvidia' | 'intel' | 'auto'; // \u6269\u5C55\u786C\u4EF6\u52A0\u901F\u9009\u9879\n    preset?: 'ultrafast' | 'superfast' | 'veryfast' | 'faster' | 'fast' | 'medium' | 'slow' | 'slower' | 'veryslow';\n    copyStreams?: boolean; // \u76F4\u63A5\u590D\u5236\u6D41\uFF0C\u6700\u5FEB\u7684\u8F6C\u6362\u65B9\u5F0F\n    threads?: number; // \u7EBF\u7A0B\u6570\n    maxThreads?: number;\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
